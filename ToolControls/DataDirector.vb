Imports System.Windows.Forms
Imports Infragistics.Win.UltraWinEditors
Imports System.Drawing
Imports Infragistics.Win.UltraWinTabControl

Public Class DataDirector
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    'The purpose of this control is to give service of Navigation of data ,filling of Data on the
    'the form to client side application
    Inherits ToolStrip
    Private WithEvents mActiveForm As Form
    Private Shared mTableName As String = "Table"
    Private Shared mTableNature As String = ""
    Friend Shared detailTableName As String = "DetailTable"
    Friend WithEvents mData As DataSet
    Public User As String = String.Empty
    Friend WithEvents mDetailData As DataSet
    Private Const selectProcedurePrefix As String = "Select"
    Private Const selectDetailProcedurePostfix As String = "Details"
    Private detailTable As DataTable
    Private masterTable As DataTable
    Friend DefaultPrimaryKeyControl As Control ''The Tag of PrimaryKeycontrol must be "PK" multiple primary keys must be "CK" i.e. compositKey
    Friend WithEvents LastControl As Control ''The next control after Primary key control 
    Friend PrimaryKeyControl() As Control
    Private objAcc As AzamTechnologies.Database.DataAccess
    Friend WithEvents DetailControl As FarPoint.Win.Spread.FpSpread
    Private Const PostedColumn As String = "Posted"
    Private Const IsAutoGeneratedColumn As String = "IsAutoGenerated"
    Private m_WorkingDate As Date
    Private Shadows Enum Buttons1
        StartSeperator
        First
        Previouse
        Refresh 'For display All Record
        [Next]
        Last
        AutoNext
        AutoNextStop
        endSeparator
    End Enum
#Region " Windows Form Designer generated code "
    Public Sub New()
        MyBase.New()
        'This call is required by the Windows Form Designer.
        InitializeComponent()
        'ButtonToolTip.SetToolTip(btnAutoNext, "Auto Next")
        'Add any initialization after the InitializeComponent() call
    End Sub
    'UserControl overrides dispose to clean up the component list.
    Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)
        If disposing Then
            If Not (components Is Nothing) Then
                components.Dispose()
            End If
        End If
        MyBase.Dispose(disposing)
    End Sub

    'Required by the Windows Form Designer
    Private components As System.ComponentModel.IContainer

    'NOTE: The following procedure is required by the Windows Form Designer
    'It can be modified using the Windows Form Designer.  
    'Do not modify it using the code editor.
    Friend WithEvents ImageList1 As System.Windows.Forms.ImageList
    Friend WithEvents AutoNextTimer As System.Timers.Timer
    Friend WithEvents BtnPreviouse As System.Windows.Forms.ToolStripButton
    Friend WithEvents BtnLast As System.Windows.Forms.ToolStripButton
    Friend WithEvents BtnAutoNext As System.Windows.Forms.ToolStripButton
    Friend WithEvents BtnFirst As System.Windows.Forms.ToolStripButton
    Friend WithEvents BtnNext As System.Windows.Forms.ToolStripButton
    Friend WithEvents BtnAutoNextStop As System.Windows.Forms.ToolStripButton
    Friend WithEvents BtnRefresh As System.Windows.Forms.ToolStripButton

    <System.Diagnostics.DebuggerStepThrough()> Private Sub InitializeComponent()
        Me.components = New System.ComponentModel.Container
        Dim resources As System.ComponentModel.ComponentResourceManager = New System.ComponentModel.ComponentResourceManager(GetType(DataDirector))
        Me.ImageList1 = New System.Windows.Forms.ImageList(Me.components)
        Me.AutoNextTimer = New System.Timers.Timer
        Me.BtnPreviouse = New System.Windows.Forms.ToolStripButton
        Me.BtnLast = New System.Windows.Forms.ToolStripButton
        Me.BtnAutoNext = New System.Windows.Forms.ToolStripButton
        Me.BtnAutoNextStop = New System.Windows.Forms.ToolStripButton
        Me.BtnFirst = New System.Windows.Forms.ToolStripButton
        Me.BtnNext = New System.Windows.Forms.ToolStripButton
        Me.BtnRefresh = New System.Windows.Forms.ToolStripButton
        CType(Me.AutoNextTimer, System.ComponentModel.ISupportInitialize).BeginInit()
        Me.SuspendLayout()
        '
        'ImageList1
        '
        Me.ImageList1.ImageStream = CType(resources.GetObject("ImageList1.ImageStream"), System.Windows.Forms.ImageListStreamer)
        Me.ImageList1.TransparentColor = System.Drawing.Color.Transparent
        Me.ImageList1.Images.SetKeyName(0, "")
        Me.ImageList1.Images.SetKeyName(1, "")
        Me.ImageList1.Images.SetKeyName(2, "")
        Me.ImageList1.Images.SetKeyName(3, "")
        Me.ImageList1.Images.SetKeyName(4, "")
        Me.ImageList1.Images.SetKeyName(5, "")
        Me.ImageList1.Images.SetKeyName(6, "")
        '
        'AutoNextTimer
        '
        Me.AutoNextTimer.Enabled = True
        Me.AutoNextTimer.Interval = 600
        Me.AutoNextTimer.SynchronizingObject = Me
        '
        'BtnPreviouse
        '
        Me.BtnPreviouse.ImageIndex = 3
        Me.BtnPreviouse.Name = "BtnPreviouse"
        Me.BtnPreviouse.Size = New System.Drawing.Size(23, 25)
        Me.BtnPreviouse.ToolTipText = "Move to previouse record (-)"
        '
        'BtnLast
        '
        Me.BtnLast.ImageIndex = 2
        Me.BtnLast.Name = "BtnLast"
        Me.BtnLast.Size = New System.Drawing.Size(23, 25)
        Me.BtnLast.ToolTipText = "Move to Last record (PageDown)"
        '
        'BtnAutoNext
        '
        Me.BtnAutoNext.ImageIndex = 1
        Me.BtnAutoNext.Name = "BtnAutoNext"
        Me.BtnAutoNext.Size = New System.Drawing.Size(23, 25)
        Me.BtnAutoNext.ToolTipText = "Move to next record after some time of interval (*)"
        '
        'BtnAutoNextStop
        '
        Me.BtnAutoNextStop.ImageIndex = 0
        Me.BtnAutoNextStop.Name = "BtnAutoNextStop"
        Me.BtnAutoNextStop.Size = New System.Drawing.Size(23, 25)
        Me.BtnAutoNextStop.ToolTipText = "Stop Auto Next fuction (Pause/Break)"
        '
        'BtnFirst
        '
        Me.BtnFirst.ImageIndex = 4
        Me.BtnFirst.Name = "BtnFirst"
        Me.BtnFirst.Size = New System.Drawing.Size(23, 25)
        Me.BtnFirst.ToolTipText = "Move to first record (PageUp)"
        '
        'BtnNext
        '
        Me.BtnNext.ImageIndex = 5
        Me.BtnNext.Name = "BtnNext"
        Me.BtnNext.Size = New System.Drawing.Size(23, 25)
        Me.BtnNext.ToolTipText = "Move to next record (+)"
        '
        'BtnRefresh
        '
        Me.BtnRefresh.ImageIndex = 6
        Me.BtnRefresh.Name = "BtnRefresh"
        Me.BtnRefresh.Size = New System.Drawing.Size(23, 25)
        Me.BtnRefresh.ToolTipText = "Display all records (F5)"
        '
        'DataDirector
        '
        Me.AllowDrop = True
        Me.ImageList = Me.ImageList1
        Me.Items.AddRange(New System.Windows.Forms.ToolStripItem() {Me.BtnFirst, Me.BtnPreviouse, Me.BtnRefresh, Me.BtnNext, Me.BtnLast, Me.BtnAutoNext, Me.BtnAutoNextStop})
        Me.Size = New System.Drawing.Size(176, 28)
        CType(Me.AutoNextTimer, System.ComponentModel.ISupportInitialize).EndInit()
        Me.ResumeLayout(False)

    End Sub
#End Region
    Friend Sub FillDataSet(ByRef data As DataSet)
        Dim objAcc As New AzamTechnologies.Database.DataAccess

        If String.IsNullOrEmpty(TableNature) Then
            If String.IsNullOrEmpty(Me.User) Then
                objAcc.PopulateDataSet(data, selectProcedurePrefix & TableName, "Option", "ALL")
            Else
                objAcc.PopulateDataSet(data, selectProcedurePrefix & TableName, "Option", "ALL", "User", Me.User)

            End If
            data.Tables(0).TableName = TableName
        Else
            If String.IsNullOrEmpty(Me.User) Then
                objAcc.PopulateDataSet(data, selectProcedurePrefix & TableName, "Option", "ALL", "TransactionNature", TableNature)
            Else
                objAcc.PopulateDataSet(data, selectProcedurePrefix & TableName, "Option", "ALL", "TransactionNature", TableNature, "User", Me.User)

                data.Tables(0).TableName = TableName
            End If
        End If
        objAcc = Nothing
    End Sub
    Private mManager As DataManager
    Public WriteOnly Property Manager() As DataManager
        Set(ByVal Value As DataManager)
            mManager = Value
        End Set
    End Property
    Public Property WorkingDate() As Date
        Get
            Return m_WorkingDate
        End Get
        Set(ByVal value As Date)
            m_WorkingDate = value
        End Set
    End Property
#Region "Movement of Records"
    Private Sub MoveFirst()
        If mData Is Nothing Then
            Exit Sub
        Else
            RowPosition = 0
            FillControlsWithData()
        End If

    End Sub
    Private Sub MovePreviouse()
        If RowPosition = 0 Then
            Exit Sub
        End If
        RowPosition -= 1
        FillControlsWithData()
    End Sub
    Private Sub MoveLast()
        RowPosition = mData.Tables(0).Rows.Count - 1
        FillControlsWithData()
    End Sub

    Private Sub MoveNext()
        RowPosition += 1
        FillControlsWithData()
    End Sub
#End Region
    Dim IsDetailMasterForm As Boolean
    Private Sub FillControlsWithData()
        mManager.IsPosted = False
        Dim ctrType As String = ""
        Dim ctr As Control
        IsDetailMasterForm = False
        Try
            With mData.Tables(0)
                If mData.Tables(0).Rows.Count <> 0 Then
                    'POSTING COLUMN FOUND 
                    FindingPostingButton(mData)

                    For Each ctr In mActiveForm.Controls
                        If TypeOf ctr Is UltraTabControl Then
                            '    Dim tabControl As UltraTabControl = ctr
                            FillControlsOnTab(ctr, mData.Tables(0))
                        End If

                        ctrType = ctr.GetType.ToString
                        If Not IsNothing(ctr.Tag) Or ctrType = "FarPoint.Win.Spread.FpSpread" Then
                            'User Must set The tag with the same name as table column name
                            If ctrType = "Infragistics.Win.UltraWinEditors.UltraComboEditor" Or ctrType = "Infragistics.Win.UltraWinEditors.UltraTextEditor" Or ctrType = "System.Windows.Forms.ComboBox" Or ctrType = "System.Windows.Forms.ListBox" Or ctrType = "ATUrduTextBox.UrduTextBox" Or
                            ctrType = "Infragistics.Win.UltraWinGrid.UltraCombo" Then
                                ctr.Text = IIf(IsDBNull(.Rows(RowPosition).Item(Mid(ctr.Tag, 4))), String.Empty, .Rows(RowPosition).Item(Mid(ctr.Tag, 4)))
                                ''Checking Null =IIF
                            ElseIf ctrType = "System.Windows.Forms.DateTimePicker" Then
                                CType(ctr, DateTimePicker).Value = IIf(IsDBNull(.Rows(RowPosition).Item(Mid(ctr.Tag, 4))), WorkingDate.Date, .Rows(RowPosition).Item(Mid(ctr.Tag, 4)))
                            ElseIf ctrType = "Infragistics.Win.UltraWinEditors.UltraDateTimeEditor" Then
                                CType(ctr, Infragistics.Win.UltraWinEditors.UltraDateTimeEditor).Value = IIf(IsDBNull(.Rows(RowPosition).Item(Mid(ctr.Tag, 4))), WorkingDate.Date, .Rows(RowPosition).Item(Mid(ctr.Tag, 4)))
                            ElseIf ctrType = "Infragistics.Win.UltraWinEditors.UltraTimeSpanEditor" Then
                                CType(ctr, Infragistics.Win.UltraWinEditors.UltraTimeSpanEditor).Value = IIf(IsDBNull(.Rows(RowPosition).Item(Mid(ctr.Tag, 4))), Now.ToLongTimeString, .Rows(RowPosition).Item(Mid(ctr.Tag, 4)))
                            ElseIf ctrType = "System.Windows.Forms.CheckBox" Then
                                CType(ctr, CheckBox).Checked = IIf(IsDBNull(.Rows(RowPosition).Item(Mid(ctr.Tag, 4))), False, .Rows(RowPosition).Item(Mid(ctr.Tag, 4)))
                            ElseIf ctrType = "Infragistics.Win.UltraWinEditors.UltraCheckEditor" Then

                                CType(ctr, Infragistics.Win.UltraWinEditors.UltraCheckEditor).Checked = IIf(IsDBNull(.Rows(RowPosition).Item(Mid(ctr.Tag, 4))), False, CBool(.Rows(RowPosition).Item(Mid(ctr.Tag, 4))))
                                'Debug.WriteLine(CBool(.Rows(RowPosition).Item(Mid(ctr.Tag, 4))).ToString & ":" & IIf(IsDBNull(.Rows(RowPosition).Item(Mid(ctr.Tag, 4))), False, CBool(.Rows(RowPosition).Item(Mid(ctr.Tag, 4)))).ToString, ctr.Text)
                            ElseIf ctrType = "System.Windows.Forms.NumericUpDown" Then
                                CType(ctr, NumericUpDown).Value = IIf(IsDBNull(.Rows(RowPosition).Item(Mid(ctr.Tag, 4))), 0D, .Rows(RowPosition).Item(Mid(ctr.Tag, 4)))
                            ElseIf ctrType = "Infragistics.Win.UltraWinEditors.UltraNumericEditor" Then
                                CType(ctr, UltraNumericEditor).Value = IIf(IsDBNull(.Rows(RowPosition).Item(Mid(ctr.Tag, 4))), 0D, .Rows(RowPosition).Item(Mid(ctr.Tag, 4)))
                            ElseIf ctrType = "FarPoint.Win.Spread.FpSpread" Then
                                DetailControl = ctr
                                IsDetailMasterForm = True
                                'CType(ctr, AxFPSpread.AxvaSpread).DataMember = mDetailData.Tables(0).TableName
                            End If
                        Else
                            If ctrType = "System.Windows.Forms.LinkLabel" Then
                                ctr.TabStop = False
                            End If
                        End If
                    Next
                End If
            End With
            If IsDetailMasterForm = True Then
                FillDetailControlsWithData()
            End If
            'mActiveForm.Tag = mManager.DataMode.Edit
            'If Not IsNothing(mManager) Then
            '    mManager.LockedControls()
            'End If
            'If mManager.LockControls = True Then
            mManager.Focus()
            mManager.BtnEdit.Select()
            Call mManager.BtnLock_Click(Me, New System.EventArgs)
            mManager.LockedControls()

            'End If
        Catch ex As SqlClient.SqlException
            MsgBox(ex.Message)
        Catch ex As IndexOutOfRangeException
            RowPosition = 0
        Catch ex As Exception
            MsgBox(ex.Message)

        End Try
    End Sub
    Private Sub FillControlsOnTab(ByRef tabControl As UltraTabControl, ByVal dataTable As DataTable)
        Dim chCtr As Control

        For Each lTabPage As UltraTab In tabControl.Tabs
            Dim ctrType As String = String.Empty
            For Each chCtr In lTabPage.TabPage.Controls
                ctrType = chCtr.GetType.ToString
                If Not IsNothing(chCtr.Tag) Or ctrType = "FarPoint.Win.Spread.FpSpread" Then
                    'User Must set The tag with the same name as table column name
                    If ctrType = "Infragistics.Win.UltraWinEditors.UltraComboEditor" Or ctrType = "Infragistics.Win.UltraWinEditors.UltraTextEditor" Or ctrType = "System.Windows.Forms.ComboBox" Or
                        ctrType = "System.Windows.Forms.ListBox" Or ctrType = "ATUrduTextBox.UrduTextBox" Or ctrType = "Infragistics.Win.UltraWinGrid.UltraCombo" Then
                        chCtr.Text = IIf(IsDBNull(dataTable.Rows(RowPosition).Item(Mid(chCtr.Tag, 4))), "", dataTable.Rows(RowPosition).Item(Mid(chCtr.Tag, 4)))
                        ''Checking Null =IIF
                    ElseIf ctrType = "System.Windows.Forms.DateTimePicker" Then
                        CType(chCtr, DateTimePicker).Value = IIf(IsDBNull(dataTable.Rows(RowPosition).Item(Mid(chCtr.Tag, 4))), WorkingDate.Date, dataTable.Rows(RowPosition).Item(Mid(chCtr.Tag, 4)))
                    ElseIf ctrType = "Infragistics.Win.UltraWinEditors.UltraDateTimeEditor" Then
                        CType(chCtr, Infragistics.Win.UltraWinEditors.UltraDateTimeEditor).Value = IIf(IsDBNull(dataTable.Rows(RowPosition).Item(Mid(chCtr.Tag, 4))), WorkingDate.Date, dataTable.Rows(RowPosition).Item(Mid(chCtr.Tag, 4)))

                    ElseIf ctrType = "Infragistics.Win.UltraWinEditors.UltraTimeSpanEditor" Then
                        CType(chCtr, Infragistics.Win.UltraWinEditors.UltraTimeSpanEditor).Value = IIf(IsDBNull(dataTable.Rows(RowPosition).Item(Mid(chCtr.Tag, 4))), Now.ToLongTimeString, dataTable.Rows(RowPosition).Item(Mid(chCtr.Tag, 4)))
                    ElseIf ctrType = "Infragistics.Win.UltraWinEditors.UltraTimeSpanEditor" Then
                        CType(chCtr, Infragistics.Win.UltraWinEditors.UltraTimeSpanEditor).Value = IIf(IsDBNull(dataTable.Rows(RowPosition).Item(Mid(chCtr.Tag, 4))), Now.ToLongTimeString, dataTable.Rows(RowPosition).Item(Mid(chCtr.Tag, 4)))
                    ElseIf ctrType = "System.Windows.Forms.NumericUpDown" Then
                        CType(chCtr, NumericUpDown).Value = IIf(IsDBNull(dataTable.Rows(RowPosition).Item(Mid(chCtr.Tag, 4))), 0D, dataTable.Rows(RowPosition).Item(Mid(chCtr.Tag, 4)))
                    ElseIf ctrType = "Infragistics.Win.UltraWinEditors.UltraNumericEditor" Then
                        CType(chCtr, UltraNumericEditor).Value = IIf(IsDBNull(dataTable.Rows(RowPosition).Item(Mid(chCtr.Tag, 4))), 0D, dataTable.Rows(RowPosition).Item(Mid(chCtr.Tag, 4)))
                    ElseIf ctrType = "System.Windows.Forms.CheckBox" Then
                        CType(chCtr, CheckBox).Checked = IIf(IsDBNull(dataTable.Rows(RowPosition).Item(Mid(chCtr.Tag, 4))), False, dataTable.Rows(RowPosition).Item(Mid(chCtr.Tag, 4)))
                    ElseIf ctrType = "Infragistics.Win.UltraWinEditors.UltraCheckEditor" Then
                        CType(chCtr, Infragistics.Win.UltraWinEditors.UltraCheckEditor).Checked = IIf(IsDBNull(dataTable.Rows(RowPosition).Item(Mid(chCtr.Tag, 4))), False, dataTable.Rows(RowPosition).Item(Mid(chCtr.Tag, 4)))
                    ElseIf ctrType = "FarPoint.Win.Spread.FpSpread" Then
                        DetailControl = chCtr
                        IsDetailMasterForm = True
                        'CType(ctr, AxFPSpread.AxvaSpread).DataMember = mDetailData.Tables(0).TableName
                    End If
                End If
            Next
        Next
    End Sub
    Private Sub FindingPostingButton(ByVal mData As DataSet)
        If mData.Tables(0).Columns.Contains(PostedColumn) = True Then
            If IIf(IsDBNull(mData.Tables(0).Rows(RowPosition).Item(PostedColumn)), 0, mData.Tables(0).Rows(RowPosition).Item(PostedColumn)) Then
                mManager.EnableDisable(True)
            Else
                mManager.EnableDisable(False Or mManager.IsPosted)
            End If
        Else
            mManager.EnableDisable(False Or mManager.IsPosted)
        End If

        'AUTO GENERATED COLUMN FOUND 
        With mData.Tables(0).Rows(RowPosition)
            If mData.Tables(0).Columns.Contains(IsAutoGeneratedColumn) = True Then
                If IIf(IsDBNull(.Item(IsAutoGeneratedColumn)), 0, .Item(IsAutoGeneratedColumn)) Then
                    mManager.EnableDisable(True)
                End If
            End If
        End With
    End Sub
    Sub FillDetailControlsWithData()
        Try

            ''IMPORTANT NOTES
            '' THE FIRST PRIMARY KEY COLUMN IN THE GRID MUST BE IN THE SAME SEQUENCE AS IN SELECT QUERY 
            ''
            objAcc = New AzamTechnologies.Database.DataAccess
            masterTable = New DataTable(TableName & selectDetailProcedurePostfix)
            Me.newRow = masterTable.NewRow
            Me.newRow = Me.CreateRow(masterTable)
            masterTable.Rows.Add(Me.newRow)

            Dim col As Int16
            Dim row As Integer
            EmptyDetailControl()

            Dim iSheet As Int16
            For iSheet = 0 To DetailControl.Sheets.Count - 1

                mDetailData = New DataSet
                If DetailControl.Sheets.Count = 1 Then
                    objAcc.PopulateDataSet(mDetailData, selectProcedurePrefix & TableName & selectDetailProcedurePostfix, masterTable)
                Else
                    objAcc.PopulateDataSet(mDetailData, selectProcedurePrefix & DetailControl.Sheets(iSheet).Tag, masterTable)
                End If

                mDetailData.DataSetName = detailTableName

                For row = 0 To mDetailData.Tables(0).Rows.Count - 1
                    If mDetailData.Tables(0).Rows.Count > DetailControl.Sheets(iSheet).RowCount Then
                        DetailControl.Sheets(iSheet).RowCount = mDetailData.Tables(0).Rows.Count
                    End If
                    For col = 0 To DetailControl.Sheets(iSheet).Columns.Count - 1
                        SettingTagOnPrimaryKeyColumn(col, row, iSheet)
                        Dim strColName As String
                        strColName = DetailControl.Sheets(iSheet).ColumnHeader.Cells(0, col).Text    'DetailControl Header text must be the same as Detail table column name
                        If Not IsNothing(mDetailData.Tables(0).Columns(strColName)) Then
                            If TypeOf (DetailControl.Sheets(iSheet).Cells(row, col).CellType) Is FarPoint.Win.Spread.CellType.MultiColumnComboBoxCellType Then
                                DetailControl.Sheets(iSheet).Cells(row, col).CellType = New FarPoint.Win.Spread.CellType.TextCellType
                            End If

                            If IsDBNull(mDetailData.Tables(0).Rows(row).Item(strColName)) Then
                                DetailControl.Sheets(iSheet).SetText(row, col, String.Empty)
                            Else
                                If TypeOf (mDetailData.Tables(0).Rows(row).Item(strColName)) Is Date Then
                                    DetailControl.Sheets(iSheet).SetValue(row, col, CDate(mDetailData.Tables(0).Rows(row).Item(strColName)))
                                ElseIf TypeOf (mDetailData.Tables(0).Rows(row).Item(strColName)) Is Boolean Then
                                    DetailControl.Sheets(iSheet).SetValue(row, col, CBool(mDetailData.Tables(0).Rows(row).Item(strColName)))
                                ElseIf TypeOf (mDetailData.Tables(0).Rows(row).Item(strColName)) Is TimeSpan Then
                                    DetailControl.Sheets(iSheet).SetValue(row, col, (mDetailData.Tables(0).Rows(row).Item(strColName)))
                                Else
                                    DetailControl.Sheets(iSheet).SetText(row, col, Trim((mDetailData.Tables(0).Rows(row).Item(strColName))))
                                End If
                            End If
                        End If
                    Next
                Next
            Next
        Catch ex As SqlClient.SqlException
            MsgBox(ex.Message)
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub
    Private Sub SettingTagOnPrimaryKeyColumn(ByVal col As Int16, ByVal row As Integer, ByVal iSheet As Int16)
        Select Case primaryKeyCol.Length
            Case 1
                If primaryKeyCol(0).ToString = mDetailData.Tables(0).Columns(col).ToString Then
                    'setting the Cell tag property of the spread grid with master primary key column value
                    DetailControl.Sheets(iSheet).SetTag(row, col, primaryKeyCol(0).ToString)
                End If
            Case 2
                If primaryKeyCol(0).ToString = mDetailData.Tables(0).Columns(col).ToString Or primaryKeyCol(1).ToString = mDetailData.Tables(0).Columns(col).ToString Then
                    'setting the Cell tag property of the spread grid with master primary key column value
                    DetailControl.Sheets(iSheet).SetTag(row, 0, primaryKeyCol(0).ToString)
                    DetailControl.Sheets(iSheet).SetTag(row, 1, primaryKeyCol(1).ToString)

                End If
            Case 3
                If primaryKeyCol(0).ToString = mDetailData.Tables(0).Columns(col).ToString Or primaryKeyCol(1).ToString = mDetailData.Tables(0).Columns(col).ToString Or primaryKeyCol(2).ToString = mDetailData.Tables(0).Columns(col).ToString Then
                    'setting the Cell tag property of the spread grid with master primary key column value
                    DetailControl.Sheets(iSheet).SetTag(row, 0, primaryKeyCol(0).ToString)
                    DetailControl.Sheets(iSheet).SetTag(row, 1, primaryKeyCol(1).ToString)
                    DetailControl.Sheets(iSheet).SetTag(row, 2, primaryKeyCol(2).ToString)
                End If
        End Select
    End Sub
    'Sub HidePrimaryKeysOfDetailDataSet()
    '    Dim Pkcount As Integer
    '    For Pkcount = 0 To masterTable.PrimaryKey.Length - 1
    '        mDetailData.Tables(0).Columns.Item(masterTable.PrimaryKey(Pkcount).ToString).ColumnMapping = MappingType.Hidden
    '    Next
    'End Sub
    Private Sub LockControl(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs)
        e.Handled = True
    End Sub
    Private Sub LockControl(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs)
        e.Handled = True
    End Sub
    Friend Sub DataDirector_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles Me.KeyDown
        Try
            Select Case e.KeyCode
                Case Keys.Escape
                    mActiveForm.Close()
                Case Keys.Enter
                    ' SendKeys.Send("{Tab}")
                Case Keys.Subtract
                    Call BtnPreviouse_Click(sender, e)
                Case Keys.PageUp
                    Call BtnFirst_Click(sender, e)
                Case Keys.PageDown
                    Call BtnLast_Click(sender, e)
                Case Keys.Add
                    Call BtnNext_Click(sender, e)
                Case Keys.Multiply
                    Call BtnAutoNext_Click(sender, e)
                Case Keys.Pause
                    Call BtnAutoNextStop_Click(sender, e)
                Case Keys.F5
                    Call BtnRefresh_Click(sender, e)
            End Select
        Catch ex As Exception
            MessageBox.Show(ex.Message)
        End Try
    End Sub
    Public Property ActiveForm() As Form
        Get
            Return mActiveForm
        End Get
        Set(ByVal Value As Form)
            If Value Is Nothing Then Exit Property
            mActiveForm = Value
            TableName = Value.AccessibleName
            TableNature = Value.AccessibleDescription
            detailTableName = TableName & selectDetailProcedurePostfix
        End Set
    End Property
    Public Property TableName() As String
        Get
            Return mTableName
        End Get
        Set(ByVal Value As String)
            mTableName = Value
        End Set
    End Property
    Public Property TableNature() As String
        Get
            Return mTableNature
        End Get
        Set(ByVal Value As String)
            mTableNature = Value
        End Set
    End Property
    'Friend oldRow As DataRow
    Friend newRow As DataRow
    Dim primaryKeyCol(1) As DataColumn
    Friend Function CreateRow(ByRef rowTable As DataTable) As DataRow
        ''changing 2nd june 2006 for check box Updating
        Dim ctr As Control
        Dim Col As DataColumn = Nothing
        Dim cntCol As Int16
        Dim row As DataRow = rowTable.NewRow
        Try
            For Each ctr In mActiveForm.Controls
                Dim ctrType As String = ctr.GetType.ToString
                If TypeOf ctr Is UltraTabControl Then  'IF tab control found
                    ' Dim TabControl As UltraTabControl = ctr
                    CreateRowFromControlsOnTab(ctr, row, Col, rowTable)
                Else
                    If ctr.Tag <> "" Or Not IsNothing(ctr.Tag) Or ctrType = "FarPoint.Win.Spread.FpSpread" Then
                        If ctrType <> "FarPoint.Win.Spread.FpSpread" Then
                            Select Case ctrType
                                Case "System.Windows.Forms.CheckBox"
                                    Col = New DataColumn(Mid(ctr.Tag, 4))
                                    rowTable.Columns.Add(Col)
                                    row.Item(Mid(ctr.Tag, 4)) = IIf(CType(ctr, CheckBox).Checked = True, 1, 0)
                                    If Mid(ctr.Tag, 1, 2) = "PK" Or Mid(ctr.Tag, 1, 2) = "CK" Then
                                        'If primary key or composite key then
                                        ReDim Preserve primaryKeyCol(cntCol)
                                        primaryKeyCol(cntCol) = Col
                                        cntCol += 1
                                        DefaultPrimaryKeyControl = ctr
                                    End If
                                Case "Infragistics.Win.UltraWinEditors.UltraCheckEditor"
                                    Col = New DataColumn(Mid(ctr.Tag, 4))
                                    rowTable.Columns.Add(Col)
                                    row.Item(Mid(ctr.Tag, 4)) = IIf(CType(ctr, Infragistics.Win.UltraWinEditors.UltraCheckEditor).Checked = True, 1, 0)
                                    If Mid(ctr.Tag, 1, 2) = "PK" Or Mid(ctr.Tag, 1, 2) = "CK" Then
                                        'If primary key or composite key then
                                        ReDim Preserve primaryKeyCol(cntCol)
                                        primaryKeyCol(cntCol) = Col
                                        cntCol += 1
                                        DefaultPrimaryKeyControl = ctr
                                    End If

                                Case "Infragistics.Win.UltraWinEditors.UltraNumericEditor"
                                    Col = New DataColumn(Mid(ctr.Tag, 4), System.Type.GetType("System.Decimal"))
                                    rowTable.Columns.Add(Col)
                                    row.Item(Mid(ctr.Tag, 4)) = CType(ctr, Infragistics.Win.UltraWinEditors.UltraNumericEditor).Value
                                    If Mid(ctr.Tag, 1, 2) = "PK" Or Mid(ctr.Tag, 1, 2) = "CK" Then
                                        'If primary key or composite key then
                                        ReDim Preserve primaryKeyCol(cntCol)
                                        primaryKeyCol(cntCol) = Col
                                        cntCol += 1
                                        DefaultPrimaryKeyControl = ctr
                                    End If
                                Case Else
                                    '  TextBox DTpicker etc
                                    Col = New DataColumn(Mid(ctr.Tag, 4))
                                    rowTable.Columns.Add(Col)
                                    row.Item(Mid(ctr.Tag, 4)) = Trim(ctr.Text)
                                    If Mid(ctr.Tag, 1, 2) = "PK" Or Mid(ctr.Tag, 1, 2) = "CK" Then
                                        'If primary key or composite key then
                                        ReDim Preserve primaryKeyCol(cntCol)
                                        primaryKeyCol(cntCol) = Col
                                        cntCol += 1
                                        DefaultPrimaryKeyControl = ctr
                                    End If
                            End Select
                        Else 'Grid Means found detail dataset
                            DetailControl = ctr
                        End If
                    End If
                End If


            Next
            rowTable.PrimaryKey() = primaryKeyCol
            Return row
        Catch ex As Exception
            MsgBox(ex.Message)
            Return Nothing
        End Try
    End Function
    Private Sub CreateRowFromControlsOnTab(ByRef tabControl As UltraTabControl, ByVal rRow As DataRow, ByVal Col As DataColumn, ByVal rowTable As DataTable)
        Dim cntCol As Integer = 0
        For Each iTabPage As UltraTab In tabControl.Tabs
            Dim chCtrType As String = String.Empty
            For Each chCtr As Control In iTabPage.TabPage.Controls
                chCtrType = chCtr.GetType.ToString
                If chCtr.Tag <> "" Or Not IsNothing(chCtr.Tag) Or chCtrType = "FarPoint.Win.Spread.FpSpread" Then

                    If chCtrType <> "FarPoint.Win.Spread.FpSpread" Then
                        Select Case chCtrType
                            Case "System.Windows.Forms.CheckBox"
                                Col = New DataColumn(Mid(chCtr.Tag, 4))
                                rowTable.Columns.Add(Col)
                                rRow.Item(Mid(chCtr.Tag, 4)) = IIf(CType(chCtr, CheckBox).Checked = True, 1, 0)
                                If Mid(chCtr.Tag, 1, 2) = "PK" Or Mid(chCtr.Tag, 1, 2) = "CK" Then
                                    'If primary key or composite key then
                                    ReDim Preserve primaryKeyCol(cntCol)
                                    primaryKeyCol(cntCol) = Col
                                    cntCol += 1
                                    DefaultPrimaryKeyControl = chCtr
                                End If
                            Case "Infragistics.Win.UltraWinEditors.UltraCheckEditor"
                                Col = New DataColumn(Mid(chCtr.Tag, 4))
                                rowTable.Columns.Add(Col)
                                rRow.Item(Mid(chCtr.Tag, 4)) = IIf(CType(chCtr, Infragistics.Win.UltraWinEditors.UltraCheckEditor).Checked = True, 1, 0)
                                If Mid(chCtr.Tag, 1, 2) = "PK" Or Mid(chCtr.Tag, 1, 2) = "CK" Then
                                    'If primary key or composite key then
                                    ReDim Preserve primaryKeyCol(cntCol)
                                    primaryKeyCol(cntCol) = Col
                                    cntCol += 1
                                    DefaultPrimaryKeyControl = chCtr
                                End If
                            Case "Infragistics.Win.UltraWinEditors.UltraNumericEditor"
                                Col = New DataColumn(Mid(chCtr.Tag, 4), System.Type.GetType("System.Decimal"))
                                rowTable.Columns.Add(Col)
                                rRow.Item(Mid(chCtr.Tag, 4)) = CDbl(chCtr.Text)
                                If Mid(chCtr.Tag, 1, 2) = "PK" Or Mid(chCtr.Tag, 1, 2) = "CK" Then
                                    'If primary key or composite key then
                                    ReDim Preserve primaryKeyCol(cntCol)
                                    primaryKeyCol(cntCol) = Col
                                    cntCol += 1
                                    DefaultPrimaryKeyControl = chCtr
                                End If
                            Case Else
                                '  TextBox DTpicker etc
                                Col = New DataColumn(Mid(chCtr.Tag, 4))
                                rowTable.Columns.Add(Col)
                                rRow.Item(Mid(chCtr.Tag, 4)) = Trim(chCtr.Text)
                                If Mid(chCtr.Tag, 1, 2) = "PK" Or Mid(chCtr.Tag, 1, 2) = "CK" Then
                                    'If primary key or composit key then
                                    ReDim Preserve primaryKeyCol(cntCol)
                                    primaryKeyCol(cntCol) = Col
                                    cntCol += 1
                                    DefaultPrimaryKeyControl = chCtr
                                End If
                        End Select
                    Else
                        'Grid Means found detail dataset
                        DetailControl = chCtr
                    End If
                End If
            Next
        Next
    End Sub
    Private Sub CheckingEmptyRows(ByVal iSheet As Integer, ByVal row As Integer, ByVal rRow As DataRow)
        Dim iLenthOfPk As Integer = primaryKeyCol.Length
        With DetailControl.Sheets(iSheet)
            Select Case iLenthOfPk
                Case 1
                    If primaryKeyCol(0).ToString = .GetTag(row, 0) Then
                        ''Check the empty row in grid 
                        ''by checking the grid cell tag of the two Hidden Primary column
                        ''
                        If Trim(.GetText(row, 0)) = "" Then
                            detailTable.Rows.Remove(rRow)
                            Exit Sub 'Next row
                        End If

                    Else
                        detailTable.Rows.Remove(rRow)
                        Exit Sub
                    End If
                Case 2
                    If primaryKeyCol(0).ToString = .GetTag(row, 0) Or primaryKeyCol(1).ToString = .GetTag(row, 0) Then
                        ''Check the empty row in grid 
                        ''by checking the grid cell tag of the two Hidden Primary column
                        ''
                        If Trim(.GetText(row, 0)) = "" Then
                            detailTable.Rows.Remove(rRow)
                            Exit Sub 'Next row
                        End If

                    Else
                        detailTable.Rows.Remove(rRow)
                        Exit Sub
                    End If
                Case 3
                    If primaryKeyCol(0).ToString = .GetTag(row, 0) Or primaryKeyCol(1).ToString = .GetTag(row, 0) Or primaryKeyCol(2).ToString = .GetTag(row, 0) Then
                        ''Check the empty row in grid 
                        ''by checking the grid cell tag of the two Hidden Primary column
                        ''
                        If Trim(.GetText(row, 0)) = "" Then
                            detailTable.Rows.Remove(rRow)
                            Exit Sub 'Next row
                        End If

                    Else
                        detailTable.Rows.Remove(rRow)
                        Exit Sub
                    End If
            End Select
        End With
    End Sub
    Friend Function FillDetailDataFromGrid() As DataSet
        If Not IsNothing(DetailControl) Then
            CreateDetailTable()
            mDetailData = Nothing
        Else
            Me.mDetailData = Nothing
            Return Nothing
        End If
        Dim col As Int16
        Dim row As Integer
        Dim iSheet As Integer
        mDetailData = New DataSet
        For iSheet = 0 To DetailControl.Sheets.Count - 1

            For row = 0 To DetailControl.Sheets(iSheet).RowCount - 1
                Dim rRow As DataRow
                rRow = detailTable.NewRow
                detailTable.Rows.Add(rRow)
                CheckingEmptyRows(iSheet, row, rRow)
                'next row
                For col = 0 To DetailControl.Sheets(iSheet).Columns.Count - 1
                    If TypeOf DetailControl.Sheets(iSheet).GetCellType(row, col) Is FarPoint.Win.Spread.CellType.CurrencyCellType Or TypeOf DetailControl.Sheets(iSheet).GetCellType(row, col) Is FarPoint.Win.Spread.CellType.NumberCellType Then

                        If DetailControl.Sheets(iSheet).GetText(row, col) = "" Then
                            rRow.Item(DetailControl.Sheets(iSheet).ColumnHeader.Cells(0, col).Text) = "0.00"
                        Else
                            rRow.Item(DetailControl.Sheets(iSheet).ColumnHeader.Cells(0, col).Text) = CDbl(DetailControl.Sheets(iSheet).GetText(row, col))
                        End If
                    ElseIf TypeOf DetailControl.Sheets(iSheet).GetCellType(row, col) Is FarPoint.Win.Spread.CellType.CheckBoxCellType Then
                        'If DetailControl.Sheets(iSheet).GetValue(row, col) = 0 Then
                        'Else
                        rRow.Item(DetailControl.Sheets(iSheet).ColumnHeader.Cells(0, col).Text) = Math.Abs(Val(DetailControl.Sheets(iSheet).GetValue(row, col)))
                        'End If
                    ElseIf TypeOf DetailControl.Sheets(iSheet).GetCellType(row, col) Is FarPoint.Win.Spread.CellType.DateTimeCellType Then

                        'If DetailControl.Sheets(iSheet).GetValue(row, col) = 0 Then
                        'Else
                        If Not IsNothing(DetailControl.Sheets(iSheet).GetValue(row, col)) Then
                            rRow.Item(DetailControl.Sheets(iSheet).ColumnHeader.Cells(0, col).Text) = Format(DateTime.Parse(DetailControl.Sheets(iSheet).GetValue(row, col)), "MM/dd/yyyy")
                        Else
                            rRow.Item(DetailControl.Sheets(iSheet).ColumnHeader.Cells(0, col).Text) = DateTime.Now
                        End If

                    ElseIf TypeOf (DetailControl.Sheets(iSheet).GetCellType(row, col)) Is FarPoint.Win.Spread.CellType.PercentCellType Then
                        If DetailControl.Sheets(iSheet).GetText(row, col) = "" Then
                            rRow.Item(DetailControl.Sheets(iSheet).ColumnHeader.Cells(0, col).Text) = "0.00"
                        Else
                            rRow.Item(DetailControl.Sheets(iSheet).ColumnHeader.Cells(0, col).Text) = Val(DetailControl.Sheets(iSheet).GetText(row, col))
                        End If

                    Else
                        rRow.Item(DetailControl.Sheets(iSheet).ColumnHeader.Cells(0, col).Text) = Trim(DetailControl.Sheets(iSheet).GetText(row, col))
                    End If

                Next
            Next
        Next
        mDetailData.Tables.Add(detailTable)
        Return mDetailData
    End Function
    Sub CreateDetailTable()
        detailTable = New DataTable(TableName & detailTableName)
        Dim col As Int16
        Dim iSheet As Integer
        For iSheet = 0 To DetailControl.Sheets.Count - 1
            For col = 0 To DetailControl.Sheets(iSheet).Columns.Count - 1
                'DetailControl.Col = col + 1
                'DetailControl.Row = 0
                If Not detailTable.Columns.Contains(DetailControl.Sheets(iSheet).ColumnHeader.Cells(0, col).Text) Then
                    detailTable.Columns.Add(DetailControl.Sheets(iSheet).ColumnHeader.Cells(0, col).Text)
                End If
            Next
        Next

    End Sub
    Dim PkCount As Int16
    Private Sub AutoIncrementsSetting(ByVal ctr As Control)
        If Mid(ctr.AccessibleDescription, 1, Len("AUTO")).ToUpper = "AUTO" Then
            Dim objAcc As New AzamTechnologies.Database.DataAccess
            Dim Reader As SqlClient.SqlDataReader
            Reader = objAcc.GetRecord(String.Format("Select{0}", TableName), "Option", "AUTO")
            'Auto increment the primary key field when we Add the
            ' AccessibleDescription Properties of the Control set to "AUTO"
            If Reader.HasRows Then
                While Reader.Read
                    ctr.Text = Reader.Item(Mid(ctr.Tag, 4, Len(ctr.Tag)))
                    ctr.Text = DataManager.FormateData.FormatKeyValue(ctr.Text, CType(ctr, UltraTextEditor).MaxLength)
                    'ctr.Enabled = False
                End While
            Else
                ctr.Text = DataManager.FormateData.FormatKeyValue(ctr.Text, CType(ctr, UltraTextEditor).MaxLength)
            End If
            ' ctr.Enabled = False
        ElseIf Mid(ctr.AccessibleDescription, 1, Len("YM.AUTO")).ToUpper = "YM.AUTO" Then  'Nature + DM.AUTO
            Dim objAcc As New AzamTechnologies.Database.DataAccess
            Dim Reader As SqlClient.SqlDataReader
            Reader = objAcc.GetRecord(String.Format("Select{0}", TableName), "Option", "AUTO", "TransactionNature", TableNature, "YearMonth", Format(WorkingDate, "yy") & Format(WorkingDate, "MM"))
            'Auto increment the primary key field when we Add the
            ' AccessibleDescription Properties of the Control set to "AUTO"
            If Reader.HasRows Then
                While Reader.Read
                    ctr.Text = Reader.Item(Mid(ctr.Tag, 4, Len(ctr.Tag)))
                    ctr.Text = Integer.Parse(ctr.Text) + 1
                    ctr.Text = ctr.Text.Insert(0, "0")
                    ' ctr.Text = mManager.FormateData.FormatKeyYearMonthValue(ctr.Text, CType(ctr, TextBox).MaxLength)
                End While
            Else
                ctr.Text = DataManager.FormateData.FormatKeyYearMonthValue(ctr.Text, CType(ctr, UltraTextEditor).MaxLength, WorkingDate)
            End If
            'ctr.Enabled = False
        Else
            ctr.Focus() ' Primary key control focusing
        End If
    End Sub
    Sub InitalizeActiveFormComponents() 'This Fuction is Called when form is activate
        ''''''''''Initialized the controls for new adding records'''''''''''''''''
        ''capturing current row status.
        ''''''''''Initialized the controls for new adding records'''''''''''''''''
        If Me.TableNature Is Nothing Or Trim(Me.TableNature) = "" Then 'Still has Shortcut key ctrl + s of grid problem (not raise grid_keydown event) 
            ' when activate other non detail form and come again detail form
            DetailControl = Nothing
        End If
        PkCount = 0
        ReDim PrimaryKeyControl(0)
        Try
            Dim ctr As Control
            If Not IsNothing(mActiveForm) Then
                If mActiveForm.Tag = DataManager.DataMode.Insert Then
                    mManager.EnableDisable(False)
                    For Each ctr In mActiveForm.Controls
                        If TypeOf ctr Is UltraTabControl Then
                            InitalizeActiveTabControls(ctr)
                        Else
                            Dim ctrType As String = ctr.GetType.ToString

                            If ctrType = "FarPoint.Win.Spread.FpSpread" Or Not IsNothing(ctr.Tag) Then
                                ControlFormatter.InitializedFormat(ctr)
                                If ctr.AccessibleDescription = "Last" Then LastControl = ctr
                                If ctrType = "Infragistics.Win.UltraWinEditors.UltraComboEditor" Or ctrType = "Infragistics.Win.UltraWinEditors.UltraTextEditor" Or ctrType = "System.Windows.Forms.ComboBox" _
                                    Or ctrType = "System.Windows.Forms.ListBox" Or ctrType = "ATUrduTextBox.UrduTextBox" Or ctrType = "Infragistics.Win.UltraWinGrid.UltraCombo" Then
                                    If ctr.AccessibleDescription = "" Then
                                        If ctr.Name.ToUpper = "NATURE" Or ctr.Name.ToUpper = "MODIFIED_BY" Or ctr.Name.ToUpper = "CREATED_BY" Or ctr.Name.ToUpper = "MODIFIED_DATE" Or ctr.Name.ToUpper = "CREATED_DATE" Then
                                        Else
                                            ctr.Text = ""
                                        End If
                                    ElseIf ctr.AccessibleDescription.ToUpper = "LAST" Then
                                        ctr.Text = String.Empty
                                    End If
                                ElseIf ctrType = "System.Windows.Forms.RadioButton" Then
                                    CType(ctr, RadioButton).Checked = False
                                ElseIf ctrType = "System.Windows.Forms.NumericUpDown" Then
                                    CType(ctr, NumericUpDown).Value = 0D
                                ElseIf ctrType = "Infragistics.Win.UltraWinEditors.UltraNumericEditor" Then
                                    CType(ctr, UltraNumericEditor).Value = 0D
                                ElseIf ctrType = "System.Windows.Forms.CheckBox" Then
                                    CType(ctr, CheckBox).Checked = False
                                ElseIf ctrType = "Infragistics.Win.UltraWinEditors.UltraCheckEditor" Then
                                    CType(ctr, Infragistics.Win.UltraWinEditors.UltraCheckEditor).Checked = False
                                ElseIf ctrType = "System.Windows.Forms.DataGrid" Then
                                    CType(CType(ctr, DataGrid).DataSource, DataSet).Tables(0).Rows.Clear()
                                ElseIf ctrType = "System.Windows.Forms.DateTimePicker" Then
                                    CType(ctr, DateTimePicker).Value = WorkingDate.Date
                                ElseIf ctrType = "Infragistics.Win.UltraWinEditors.UltraDateTimeEditor" Then
                                    CType(ctr, Infragistics.Win.UltraWinEditors.UltraDateTimeEditor).Value = WorkingDate.Date
                                ElseIf ctrType = "Infragistics.Win.UltraWinEditors.UltraTimeSpanEditor" Then
                                    CType(ctr, Infragistics.Win.UltraWinEditors.UltraTimeSpanEditor).Value = New TimeSpan(Now.TimeOfDay.Hours, Now.TimeOfDay.Minutes, 0)
                                ElseIf ctrType = "FarPoint.Win.Spread.FpSpread" Then
                                    DetailControl = ctr
                                    SetDetailControlSettings(DetailControl)
                                    DetailControl.TabStripInsertTab = False
                                    EmptyDetailControl()
                                    DetailControl.ActiveSheetIndex = 0
                                End If
                                If Mid(ctr.Tag, 1, 2).ToUpper = "PK" Then
                                    ReDim Preserve PrimaryKeyControl(PkCount)
                                    PrimaryKeyControl(PkCount) = ctr
                                    RemoveHandler PrimaryKeyControl(PkCount).Validating, AddressOf PrimaryKeyValidation
                                    AddHandler PrimaryKeyControl(PkCount).Validating, AddressOf PrimaryKeyValidation
                                    PkCount = PkCount + 1
                                    AutoIncrementsSetting(ctr)
                                ElseIf Mid(ctr.Tag, 1, 2).ToUpper = "CK" Then
                                    ReDim Preserve PrimaryKeyControl(PkCount)
                                    PrimaryKeyControl(PkCount) = ctr
                                    RemoveHandler PrimaryKeyControl(PkCount).Validating, AddressOf PrimaryKeyValidation
                                    AddHandler PrimaryKeyControl(PkCount).Validating, AddressOf PrimaryKeyValidation
                                    PkCount = PkCount + 1
                                End If
                            Else 'Tag is  null
                                If ctrType = "System.Windows.Forms.LinkLabel" Then
                                    ctr.TabStop = False
                                End If
                            End If

                        End If
                    Next

                    If Me.mActiveForm.Tag = DataManager.DataMode.Posted Then
                        Me.mActiveForm.Tag = DataManager.DataMode.Locked
                    Else
                        Me.mActiveForm.Tag = DataManager.DataMode.Inserting
                    End If
                ElseIf mActiveForm.Tag = DataManager.DataMode.Locked Then
                    Me.mActiveForm.Tag = DataManager.DataMode.Locked
                ElseIf mActiveForm.Tag = DataManager.DataMode.Edit Then
                    Me.mActiveForm.Tag = DataManager.DataMode.Locked
                End If
            End If
            '''''''Focus on Primary key
            If Not IsNothing(PrimaryKeyControl(0)) Then
                If Mid(PrimaryKeyControl(0).Tag, 1, 2).ToString.ToUpper = "PK" Then
                    PrimaryKeyControl(0).Focus()
                End If
            End If
        Catch ex As SqlClient.SqlException
            MsgBox(ex.Message)

        Catch ex As Exception
            MsgBox(ex.Message)
        Finally

        End Try
        'creating new row when fresh the record
        'Dim table = New DataTable(tableName)
        'newRow = table.NewRow
        'oldRow = CreateRow(table)
        '''''''''''''''''''
    End Sub

    Sub SetDetailControlSettings(Grid As FarPoint.Win.Spread.FpSpread)

        Dim im As New FarPoint.Win.Spread.InputMap

        ' Deactivate F2 key in cells not being edited.

        im = Grid.GetInputMap(FarPoint.Win.Spread.InputMapMode.WhenFocused)

        im.Put(New FarPoint.Win.Spread.Keystroke(Keys.F2, Keys.None), FarPoint.Win.Spread.SpreadActions.None)

        ' Deactivate F2 key in cells being edited.

        im = Grid.GetInputMap(FarPoint.Win.Spread.InputMapMode.WhenAncestorOfFocused)

        im.Put(New FarPoint.Win.Spread.Keystroke(Keys.F2, Keys.None), FarPoint.Win.Spread.SpreadActions.StartEditing)



        'Enter key settings
        ' Define the operation of pressing Enter key in cells not beingedited as "Move to the next row".
        im = Grid.GetInputMap(FarPoint.Win.Spread.InputMapMode.WhenFocused)
        im.Put(New FarPoint.Win.Spread.Keystroke(Keys.Enter, Keys.None), FarPoint.Win.Spread.SpreadActions.MoveToNextColumnWrap)
        ' Define the operation of pressing Enter key in cells being editedas "Move to the next row".
        im = Grid.GetInputMap(FarPoint.Win.Spread.InputMapMode.WhenAncestorOfFocused)
        im.Put(New FarPoint.Win.Spread.Keystroke(Keys.Enter, Keys.None), FarPoint.Win.Spread.SpreadActions.MoveToNextColumnWrap)

    End Sub
    Private Sub InitalizeActiveTabControls(ByRef Tab As UltraTabControl)
        Tab.SelectedTab = Tab.Tabs(0)
        '  Dim Tab As UltraTabControl = TabControl
        Dim chCtr As Control
        For Each lTabPage As UltraTab In Tab.Tabs
            For Each chCtr In lTabPage.TabPage.Controls
                Dim ctrType As String = chCtr.GetType.ToString
                If ctrType = "FarPoint.Win.Spread.FpSpread" Or Not IsNothing(chCtr.Tag) Then

                    ControlFormatter.InitializedFormat(chCtr)
                    If chCtr.AccessibleDescription = "Last" Then LastControl = chCtr

                    With chCtr
                        If ctrType = "Infragistics.Win.UltraWinEditors.UltraComboEditor" Or ctrType = "Infragistics.Win.UltraWinEditors.UltraTextEditor" Or ctrType = "System.Windows.Forms.ComboBox" Or
                            ctrType = "System.Windows.Forms.ListBox" Or ctrType = "ATUrduTextBox.UrduTextBox" Or ctrType = "Infragistics.Win.UltraWinGrid.UltraCombo" Then
                            If .AccessibleDescription = "" Then
                                If .Name.ToUpper = "NATURE" Or .Name.ToUpper = "MODIFIED_BY" Or .Name.ToUpper = "CREATED_BY" Or .Name.ToUpper = "MODIFIED_DATE" Or .Name.ToUpper = "CREATED_DATE" Then
                                Else
                                    .Text = ""
                                End If
                            ElseIf .AccessibleDescription.ToUpper = "LAST" Then
                                .Text = String.Empty
                            End If
                        ElseIf ctrType = "System.Windows.Forms.RadioButton" Then
                            CType(chCtr, RadioButton).Checked = False
                        ElseIf ctrType = "System.Windows.Forms.NumericUpDown" Then
                            CType(chCtr, NumericUpDown).Value = 0D
                        ElseIf ctrType = "Infragistics.Win.UltraWinEditors.UltraNumericEditor" Then
                            CType(chCtr, UltraNumericEditor).Value = 0D
                        ElseIf ctrType = "System.Windows.Forms.CheckBox" Then
                            CType(chCtr, CheckBox).Checked = False
                        ElseIf ctrType = "Infragistics.Win.UltraWinEditors.UltraCheckEditor" Then
                            CType(chCtr, Infragistics.Win.UltraWinEditors.UltraCheckEditor).Checked = False
                        ElseIf ctrType = "System.Windows.Forms.DataGrid" Then
                            CType(CType(chCtr, DataGrid).DataSource, DataSet).Tables(0).Rows.Clear()
                        ElseIf ctrType = "System.Windows.Forms.DateTimePicker" Then
                            CType(chCtr, DateTimePicker).Value = WorkingDate.Date
                        ElseIf ctrType = "Infragistics.Win.UltraWinEditors.UltraDateTimeEditor" Then
                            CType(chCtr, Infragistics.Win.UltraWinEditors.UltraDateTimeEditor).Value = WorkingDate.Date
                        ElseIf ctrType = "Infragistics.Win.UltraWinEditors.UltraTimeSpanEditor" Then
                            CType(chCtr, Infragistics.Win.UltraWinEditors.UltraTimeSpanEditor).Value = New TimeSpan(Now.TimeOfDay.Hours, Now.TimeOfDay.Minutes, 0)
                        ElseIf ctrType = "FarPoint.Win.Spread.FpSpread" Then
                            DetailControl = chCtr
                            SetDetailControlSettings(DetailControl)
                            EmptyDetailControl()
                            DetailControl.ActiveSheetIndex = 0
                        End If
                        If Mid(chCtr.Tag, 1, 2).ToUpper = "PK" Then
                            ReDim Preserve PrimaryKeyControl(PkCount)
                            PrimaryKeyControl(PkCount) = chCtr
                            RemoveHandler PrimaryKeyControl(PkCount).Validating, AddressOf PrimaryKeyValidation
                            AddHandler PrimaryKeyControl(PkCount).Validating, AddressOf PrimaryKeyValidation
                            PkCount = PkCount + 1
                            AutoIncrementsSetting(chCtr)
                        ElseIf Mid(chCtr.Tag, 1, 2).ToUpper = "CK" Then
                            ReDim Preserve PrimaryKeyControl(PkCount)
                            PrimaryKeyControl(PkCount) = chCtr
                            RemoveHandler PrimaryKeyControl(PkCount).Validating, AddressOf PrimaryKeyValidation
                            AddHandler PrimaryKeyControl(PkCount).Validating, AddressOf PrimaryKeyValidation
                            PkCount = PkCount + 1
                        End If
                    End With
                Else
                    'Tag is null
                    If ctrType = "System.Windows.Forms.LinkLabel" Then
                        chCtr.TabStop = False
                    End If
                End If
            Next
        Next

    End Sub
    Const OPTIONVALIDATION As String = "PKVALIDATION"
    Sub PrimaryKeyValidation(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs)
        Try
            If ActiveForm.Tag <> DataManager.DataMode.Edit AndAlso Me.ActiveForm.Tag <> DataManager.DataMode.Locked Then
                If IsNothing(Me.mData) OrElse Me.mData.Tables(0).Rows.Count = 1 Then
                    If Me.mManager.LockControls = False Then
                        Dim Acc As New AzamTechnologies.Database.DataAccess
                        Dim read As DataSet = Nothing
                        If PrimaryKeyControl.Length = 1 Then
                            If PrimaryKeyControl(0).Text.Length = 0 Then Exit Sub
                            If String.IsNullOrEmpty(User) Then
                                Acc.PopulateDataSet(read, String.Format("Select{0}", TableName), "OPTION", OPTIONVALIDATION, Mid(PrimaryKeyControl(0).Tag, 4), PrimaryKeyControl(0).Text)
                            Else
                                Acc.PopulateDataSet(read, String.Format("Select{0}", TableName), "OPTION", OPTIONVALIDATION, Mid(PrimaryKeyControl(0).Tag, 4), PrimaryKeyControl(0).Text, "User", User)
                            End If


                        ElseIf PrimaryKeyControl.Length = 2 Then
                            If PrimaryKeyControl(0).Text.Length = 0 Or PrimaryKeyControl(1).Text.Length = 0 Then Exit Sub
                            If String.IsNullOrEmpty(User) Then
                                Acc.PopulateDataSet(read, String.Format("Select{0}", TableName), "OPTION", OPTIONVALIDATION, Mid(PrimaryKeyControl(0).Tag, 4), PrimaryKeyControl(0).Text, Mid(PrimaryKeyControl(1).Tag, 4), PrimaryKeyControl(1).Text)
                            Else
                                Acc.PopulateDataSet(read, String.Format("Select{0}", TableName), "OPTION", OPTIONVALIDATION, Mid(PrimaryKeyControl(0).Tag, 4), PrimaryKeyControl(0).Text, Mid(PrimaryKeyControl(1).Tag, 4), PrimaryKeyControl(1).Text, "User", User)
                            End If

                        ElseIf PrimaryKeyControl.Length = 3 Then

                            If PrimaryKeyControl(0).Text.Length = 0 Or PrimaryKeyControl(1).Text.Length = 0 Or PrimaryKeyControl(2).Text.Length = 0 Then Exit Sub
                            If String.IsNullOrEmpty(User) Then
                                Acc.PopulateDataSet(read, String.Format("Select{0}", TableName), "OPTION", OPTIONVALIDATION, Mid(PrimaryKeyControl(0).Tag, 4), PrimaryKeyControl(0).Text, Mid(PrimaryKeyControl(1).Tag, 4), PrimaryKeyControl(1).Text, Mid(PrimaryKeyControl(2).Tag, 4), PrimaryKeyControl(2).Text)
                            Else
                                Acc.PopulateDataSet(read, String.Format("Select{0}", TableName), "OPTION", OPTIONVALIDATION, Mid(PrimaryKeyControl(0).Tag, 4), PrimaryKeyControl(0).Text, Mid(PrimaryKeyControl(1).Tag, 4), PrimaryKeyControl(1).Text, Mid(PrimaryKeyControl(2).Tag, 4), PrimaryKeyControl(2).Text, "User", User)
                            End If

                        End If
                        '''''''''''''''''''''

                        If read.Tables(0).Rows.Count > 0 Then
                            Me.SetData(read, 0)
                        Else
                            If Me.ActiveForm.Tag = DataManager.DataMode.Edit Then
                                mActiveForm.Tag = DataManager.DataMode.Insert
                                Me.InitalizeActiveFormComponents()
                            End If
                        End If
                    End If

                Else

                    Dim view As New DataView
                    view.Table = Me.mData.Tables(0)
                    Dim int As Integer
                    If view.Table.TableName = Me.ActiveForm.AccessibleName Then
                        If PrimaryKeyControl.Length = 1 Then
                            view.Sort = Mid(PrimaryKeyControl(0).Tag, 4)
                            int = view.Find(PrimaryKeyControl(0).Text)
                            mData.Tables.Clear()
                            mData.Tables.Add(view.ToTable)
                            If int <> -1 Then
                                Me.SetData(Me.mData, int)
                            End If

                        ElseIf PrimaryKeyControl.Length = 2 Then
                            Dim arr(1) As String
                            arr(0) = PrimaryKeyControl(0).Text
                            arr(1) = PrimaryKeyControl(1).Text
                            view.Sort = Mid(PrimaryKeyControl(0).Tag, 4) & "," & Mid(PrimaryKeyControl(1).Tag, 4)
                            mData.Tables.Clear()
                            int = view.Find(arr)
                            mData.Tables.Add(view.ToTable)

                            If int <> -1 Then
                                Me.SetData(Me.mData, int)
                            End If

                        ElseIf PrimaryKeyControl.Length = 3 Then
                            Dim arr(2) As String
                            arr(0) = PrimaryKeyControl(0).Text
                            arr(1) = PrimaryKeyControl(1).Text
                            arr(2) = PrimaryKeyControl(2).Text
                            view.Sort = Mid(PrimaryKeyControl(0).Tag, 4) & "," & Mid(PrimaryKeyControl(1).Tag, 4) & "," & Mid(PrimaryKeyControl(2).Tag, 4)
                            mData.Tables.Clear()
                            int = view.Find(arr)
                            mData.Tables.Add(view.ToTable)

                            If int <> -1 Then
                                Me.SetData(Me.mData, int)
                            End If
                        End If
                    End If
                End If
            End If
        Catch ex As NullReferenceException

        Catch ex As Exception
            'DataComponents.LogGenerator.CreateLog(ex.Message, Me.TableName & "Validating", 1, EventLogEntryType.Error)
            MessageBox.Show(ex.Message, "Validation Record")
        End Try
    End Sub
    Private Sub EmptyDetailControl()
        Dim iCol As Int16
        Dim iRow As Int16
        Dim iSheet As Int16
        'DetailControl.ActiveSheetIndex = 0
        For iSheet = 0 To DetailControl.Sheets.Count - 1
            For iRow = 0 To DetailControl.Sheets(iSheet).RowCount - 1
                For iCol = 0 To DetailControl.Sheets(iSheet).ColumnCount - 1
                    DetailControl.Sheets(iSheet).SetText(iRow, iCol, String.Empty)
                Next
            Next
        Next
    End Sub

    'Private Function checkForChangeInRow(ByRef oldRow As DataRow, ByRef newRow As DataRow) As Boolean
    '    'this funtion is basicaly used for that user change something in the control data on the form or not
    '    Dim rtnType As Boolean
    '    If Not IsNothing(oldRow) Then
    '        Dim i As Integer
    '        For i = 0 To newRow.Table.Columns.Count - 1
    '            If oldRow(i) = newRow(i) Then
    '                rtnType = False
    '            Else
    '                Return True : Exit Function
    '            End If
    '        Next
    '    End If
    '    Return rtnType
    'End Function
    Public Shared RowPosition As Integer
    Public Overloads Sub SetData(ByRef dataSet As DataSet, ByVal rowNumber As Integer)
        'this procedure will Set the dataset and call a procedure to fill controls
        mData = dataSet
        RowPosition = rowNumber
        FillControlsWithData()
    End Sub
    Public Overloads Sub SetData(ByRef dataset As DataSet)
        mData = dataset
        FillControlsWithData()
    End Sub
    Private Sub AutoNextTimer_Elapsed(ByVal sender As System.Object, ByVal e As System.Timers.ElapsedEventArgs)
        If RowPosition >= mData.Tables(0).Rows.Count - 1 Then
            AutoNextTimer.Stop()
            RemoveHandler AutoNextTimer.Elapsed, AddressOf AutoNextTimer_Elapsed
            Exit Sub
        Else
            RowPosition += 1
            FillControlsWithData()
            'Dim table = New DataTable(tableName)
            'oldRow = table.NewRow
            'oldRow = CreateRow(table)
        End If
    End Sub
    Private Sub mActiveForm_Closed(ByVal sender As Object, ByVal e As System.EventArgs) Handles mActiveForm.Closed
        mActiveForm = Nothing
        mData = Nothing
        newRow = Nothing
        'oldRow = Nothing
        mManager = Nothing
        mDetailData = Nothing
        DefaultPrimaryKeyControl = Nothing
        LastControl = Nothing
        DetailControl = Nothing
    End Sub
#Region "Shortcut for cleint form to move next,previouse ,etc of records"
    Private Sub BtnFirst_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles BtnFirst.Click
        If mData Is Nothing OrElse mData.Tables(0).Rows.Count = 0 Then Exit Sub
        MoveFirst()
    End Sub

    Private Sub BtnAutoNext_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles BtnAutoNext.Click
        If mData Is Nothing OrElse mData.Tables(0).Rows.Count = 0 Then Exit Sub
        AutoNextTimer.Start()
        AddHandler AutoNextTimer.Elapsed, AddressOf AutoNextTimer_Elapsed
    End Sub

    Private Sub BtnLast_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles BtnLast.Click
        If mData Is Nothing OrElse mData.Tables(0).Rows.Count = 0 Then Exit Sub
        MoveLast()
    End Sub

    Private Sub BtnNext_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles BtnNext.Click
        If mData Is Nothing OrElse mData.Tables(0).Rows.Count = 0 Then Exit Sub
        MoveNext()
    End Sub

    Private Sub BtnPreviouse_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles BtnPreviouse.Click
        If mData Is Nothing OrElse mData.Tables(0).Rows.Count = 0 Then Exit Sub
        MovePreviouse()
    End Sub

    Private Sub BtnRefresh_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles BtnRefresh.Click
        Try
            If Not IsNothing(mActiveForm) Then
                Me.mActiveForm.Cursor = Cursors.WaitCursor
                FillDataSet(mData)
                If mData.Tables(0).Rows.Count > 0 Then
                    Me.SetData(mData, 0) ''First record displayed
                End If
                Me.mActiveForm.Cursor = Cursors.Default
            Else
                Exit Sub
            End If
        Catch ex As Exception
            MessageBox.Show(ex.Message)
        End Try
    End Sub
    Private Sub BtnAutoNextStop_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles BtnAutoNextStop.Click
        AutoNextTimer.Stop()
        RemoveHandler AutoNextTimer.Elapsed, AddressOf AutoNextTimer_Elapsed
    End Sub
#End Region
#Region "Shortcut for cleint form to move next,previouse ,etc of records"
    Private Sub mActiveForm_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles mActiveForm.KeyDown
        Try
            If e.KeyCode = Keys.Escape Then
                mActiveForm.Close()
            ElseIf e.Control = True And e.KeyCode = Keys.Left Then
                Call BtnPreviouse_Click(sender, e)
            ElseIf e.Control = True And e.KeyCode = Keys.Up Then
                Call BtnFirst_Click(sender, e)
            ElseIf e.Control = True And e.KeyCode = Keys.Down Then
                Call BtnLast_Click(sender, e)
            ElseIf e.Control = True And e.KeyCode = Keys.Right Then
                Call BtnNext_Click(sender, e)
            ElseIf e.KeyCode = Keys.PageDown Then
                Call BtnAutoNext_Click(sender, e)
            ElseIf e.KeyCode = Keys.End Then
                Call BtnAutoNextStop_Click(sender, e)
            ElseIf e.KeyCode = Keys.F5 Then
                Call BtnRefresh_Click(sender, e)
            End If

            If DetailControl IsNot Nothing Then
                If e.KeyCode = Keys.Enter And TypeOf (DetailControl.Sheets(0).ActiveCell.CellType) Is FarPoint.Win.Spread.CellType.MultiColumnComboBoxCellType Or mActiveForm.ActiveControl Is DetailControl Then
                    ''Creating problem when multicolum combo box lost focus it empty the losting focus cell
                Else
                    If e.KeyCode = Keys.Enter Then
                        SendKeys.Send("{Tab}")
                    End If
                End If
            Else
                If e.KeyCode = Keys.Enter Then
                    SendKeys.Send("{Tab}")
                End If
            End If
        Catch ex As Exception
            MessageBox.Show(ex.Message)
        End Try
    End Sub
#End Region
    Private Sub DetailControl_KeyDownEvent(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles DetailControl.KeyDown
        ''Action short cut
        If e.KeyCode = Keys.Escape Then
            mActiveForm_KeyDown(Me, New KeyEventArgs(e.KeyCode))
        ElseIf e.Shift = 2 And e.KeyCode = Keys.S Then
            mManager.BtnSave_Click(sender, New EventArgs)
        ElseIf e.Shift = 2 And e.KeyCode = Keys.E Then
            mManager.BtnEdit_Click(sender, New EventArgs)
        ElseIf e.Shift = 2 And e.KeyCode = Keys.D Then
            mManager.BtnDelete_Click(sender, New EventArgs)
        ElseIf e.Shift = 2 And e.KeyCode = Keys.L Then
            mManager.BtnLock_Click(sender, New EventArgs)
        ElseIf e.Shift = 2 And e.KeyCode = Keys.U Then
            mManager.BtnUndo_Click(sender, New EventArgs)
            ''''Navigation Short cut
        ElseIf e.Shift = 2 And e.KeyCode = Keys.Left Then
            Call BtnPreviouse_Click(sender, New EventArgs)
        ElseIf e.Shift = 2 And e.KeyCode = Keys.Up Then
            Call BtnFirst_Click(sender, New EventArgs)
        ElseIf e.Shift = 2 And e.KeyCode = Keys.Down Then
            Call BtnLast_Click(sender, New EventArgs)
        ElseIf e.Shift = 2 And e.KeyCode = Keys.Right Then
            Call BtnNext_Click(sender, New EventArgs)
        ElseIf e.KeyCode = Keys.PageDown Then
            Call BtnAutoNext_Click(sender, New EventArgs)
        ElseIf e.KeyCode = Keys.End Then
            Call BtnAutoNextStop_Click(sender, New EventArgs)
        End If

    End Sub
    Private Sub mActiveForm_Closing(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles mActiveForm.Closing
        If MessageBox.Show("Do you want to close " & Me.TableName & " File?", "Closing File", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) = DialogResult.Yes Then
            e.Cancel = False
            BtnAutoNextStop_Click(sender, New System.EventArgs)
        Else
            e.Cancel = True
        End If
    End Sub
    'Protected Overrides Sub OnButtonClick(ByVal e As System.Windows.Forms.ToolBarButtonClickEventArgs)
    '    Try
    '        If Me.Buttons.IndexOf(e.Button) = Buttons1.Refresh Then
    '            If Not IsNothing(mActiveForm) Then
    '                Me.mActiveForm.Cursor = Cursors.WaitCursor
    '                FillDataSet(mData)
    '                If mData.Tables(0).Rows.Count > 0 Then
    '                    Me.SetData(mData, 0) ''First record displayed
    '                End If
    '            Else
    '                Exit Sub
    '            End If
    '        End If

    '        'If Not IsNothing(mData) Then
    '        '    Me.mActiveForm.Cursor = Cursors.WaitCursor
    '        '    FillDataSet(mData)
    '        'Else
    '        '    Exit Sub
    '        'End If
    '        Select Case Me.Buttons.IndexOf(e.Button)
    '            Case Buttons1.First
    '                MoveFirst()
    '            Case Buttons1.Next
    '                MoveNext()
    '            Case Buttons1.Last
    '                MoveLast()
    '            Case Buttons1.Previouse
    '                MovePreviouse()
    '            Case Buttons1.AutoNext
    '                AutoNextStart()
    '            Case Buttons1.AutoNextStop
    '                AutoNextStop()
    '        End Select
    '        Me.mActiveForm.Cursor = Cursors.Default
    '    Catch ex As SqlClient.SqlException
    '        DataComponents.LogGenerator.CreateLog(ex.Message, Me.TableName & "FillingData", 0, EventLogEntryType.Error)
    '        MessageBox.Show(ex.Message, " Filling Data", MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1)
    '    Catch ex As DataComponents.Database.ConnectionException
    '        DataComponents.LogGenerator.CreateLog(ex.Message, Me.TableName & "FillingData", 0, EventLogEntryType.Error)
    '        MessageBox.Show(ex.Message, " Filling Data", MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1)
    '    Catch ex As Exception
    '        DataComponents.LogGenerator.CreateLog(ex.Message, Me.TableName & "FillingData", 0, EventLogEntryType.Error)
    '        Me.mActiveForm.Cursor = Cursors.Default
    '        MessageBox.Show(ex.Message)
    '    Catch ex As Exception
    '        DataComponents.LogGenerator.CreateLog(ex.Message, Me.TableName & "FillingData", 0, EventLogEntryType.Error)
    '        Me.mActiveForm.Cursor = Cursors.Default
    '        MessageBox.Show(ex.Message)
    '    Catch ex As DataComponents.Database.ConnectionException
    '        MessageBox.Show(ex.Message, " Filling Data", MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1)
    '    End Try
    '    'Create new row after position change
    '    'table = New DataTable(tableName)
    '    'oldRow = table.NewRow
    '    'oldRow = CreateRow(table)
    '    'oldRow = newRow
    'End Sub
    'public shadows readonly property buttons() as toolbarbuttoncollection
    '    get
    '        ' return new toolbarbutton
    '    end get

    'end property

    Private Sub LastControl_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles LastControl.LostFocus
        If LastControl.Focused = False Then
            Me.mManager.Focus()
            Me.mManager.BtnSave.Select()
        End If

    End Sub
End Class